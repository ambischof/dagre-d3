{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","dagre-d3.core.js","lib/arrows.js","lib/create-clusters.js","lib/create-edge-labels.js","lib/create-edge-paths.js","lib/create-nodes.js","lib/d3.js","lib/dagre.js","lib/graphlib.js","lib/intersect/index.js","lib/intersect/intersect-circle.js","lib/intersect/intersect-ellipse.js","lib/intersect/intersect-line.js","lib/intersect/intersect-node.js","lib/intersect/intersect-polygon.js","lib/intersect/intersect-rect.js","lib/label/add-html-label.js","lib/label/add-label.js","lib/label/add-svg-label.js","lib/label/add-text-label.js","lib/lodash.js","lib/position-clusters.js","lib/position-edge-labels.js","lib/position-nodes.js","lib/render.js","lib/shapes.js","lib/util.js","lib/version.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dagreD3","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","graphlib","dagre","intersect","render","util","version","./lib/dagre","./lib/graphlib","./lib/intersect","./lib/render","./lib/util","./lib/version","2","normal","parent","id","edge","type","marker","append","attr","path","style","applyStyle","vee","undirected","default","./util","3","createClusters","selection","clusters","nodes","filter","v","isSubgraph","svgClusters","selectAll","data","remove","enter","node","applyTransition","itemQueue","each","thisGroup","d3","select","labelGroup","push","addLabel","createLabel","clusterLabelPos","styleLabels","c","domCluster","exit","./label/add-label","4","createEdgeLabels","svgEdgeLabels","edges","edgeToId","classed","labelQueue","label","labelSvg","forEach","item","bbox","getBBox","labelId","_","has","width","height","./d3","./lodash","5","createEdgePaths","arrows","svgPaths","domEdge","elem","applyClass","arrowheadId","uniqueId","makeFragmentRef","location","href","calcPoints","arrowhead","url","fragmentId","baseUrl","split","tail","head","w","points","slice","unshift","intersectNode","createLine","line","svg","x","d","y","interpolate","lineInterpolate","tension","Number","lineTension","getCoords","matrix","ownerSVGElement","getScreenCTM","inverse","multiply","translate","svgPathsEnter","stashed","map","sourceElem","range","el","specs","svgPathExit","source","getTotalLength","./intersect/intersect-node","6","createNodes","shapes","simpleNodes","svgNodes","labelDom","pick","shape","paddingLeft","paddingRight","paddingTop","paddingBottom","shapeSvg","shapeBBox","7","8","undefined","9","10","circle","ellipse","polygon","rect","./intersect-circle","./intersect-ellipse","./intersect-node","./intersect-polygon","./intersect-rect","11","intersectCircle","rx","point","intersectEllipse","12","ry","cx","cy","px","py","det","Math","sqrt","dx","abs","dy","13","intersectLine","p1","p2","q1","q2","a1","a2","b1","b2","c1","c2","r1","r2","r3","r4","denom","offset","num","sameSign","14","15","intersectPolygon","polyPoints","x1","y1","intersections","minX","POSITIVE_INFINITY","minY","entry","min","left","top","sort","p","q","pdx","pdy","distp","qdx","qdy","distq","console","log","./intersect-line","16","intersectRect","sx","sy","h","17","addHtmlLabel","root","fo","div","insert","html","labelStyle","client","getBoundingClientRect","../util","18","labelType","addSVGLabel","addTextLabel","getLabelBBox","labelBBox","finishStyling","items","./add-html-label","./add-svg-label","./add-text-label","19","domNode","appendChild","20","lines","processEscapeSequences","text","ch","newText","escaped","21","lodash","22","positionClusters","created","23","positionEdgeLabels","24","positionNodes","25","fn","preProcessGraph","outputGroup","createOrSelectGroup","clustersGroup","edgePathsGroup","edgeLabels","layout","postProcessGraph","value","arguments","children","defaults","paddingX","paddingY","padding","NODE_DEFAULT_ATTRS","k","_prevWidth","_prevHeight","EDGE_DEFAULT_ATTRS","name","empty","./arrows","./create-clusters","./create-edge-labels","./create-edge-paths","./create-nodes","./dagre","./position-clusters","./position-edge-labels","./position-nodes","./shapes","26","max","diamond","SQRT2","join","./intersect/intersect-circle","./intersect/intersect-ellipse","./intersect/intersect-polygon","./intersect/intersect-rect","27","escapeId","str","String","replace","ID_DELIM","dom","styleFn","classFn","otherClasses","graph","isPlainObject","transition","isFunction","28"],"mappings":"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","file":"dagre-d3.core.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * @license\n * Copyright (c) 2012-2013 Chris Pettitt\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nmodule.exports =  {\n  graphlib: require(\"./lib/graphlib\"),\n  dagre: require(\"./lib/dagre\"),\n  intersect: require(\"./lib/intersect\"),\n  render: require(\"./lib/render\"),\n  util: require(\"./lib/util\"),\n  version: require(\"./lib/version\")\n};\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.dagreD3 = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * @license\n * Copyright (c) 2012-2013 Chris Pettitt\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nmodule.exports =  {\n  graphlib: require(\"./lib/graphlib\"),\n  dagre: require(\"./lib/dagre\"),\n  intersect: require(\"./lib/intersect\"),\n  render: require(\"./lib/render\"),\n  util: require(\"./lib/util\"),\n  version: require(\"./lib/version\")\n};\n\n},{\"./lib/dagre\":8,\"./lib/graphlib\":9,\"./lib/intersect\":10,\"./lib/render\":25,\"./lib/util\":27,\"./lib/version\":28}],2:[function(require,module,exports){\nvar util = require(\"./util\");\n\nmodule.exports = {\n  \"default\": normal,\n  \"normal\": normal,\n  \"vee\": vee,\n  \"undirected\": undirected\n};\n\nfunction normal(parent, id, edge, type) {\n  var marker = parent.append(\"marker\")\n    .attr(\"id\", id)\n    .attr(\"viewBox\", \"0 0 10 10\")\n    .attr(\"refX\", 9)\n    .attr(\"refY\", 5)\n    .attr(\"markerUnits\", \"strokeWidth\")\n    .attr(\"markerWidth\", 8)\n    .attr(\"markerHeight\", 6)\n    .attr(\"orient\", \"auto\");\n\n  var path = marker.append(\"path\")\n    .attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\")\n    .style(\"stroke-width\", 1)\n    .style(\"stroke-dasharray\", \"1,0\");\n  util.applyStyle(path, edge[type + \"Style\"]);\n  if (edge[type + \"Class\"]) {\n    path.attr(\"class\", edge[type + \"Class\"]);\n  }\n}\n\nfunction vee(parent, id, edge, type) {\n  var marker = parent.append(\"marker\")\n    .attr(\"id\", id)\n    .attr(\"viewBox\", \"0 0 10 10\")\n    .attr(\"refX\", 9)\n    .attr(\"refY\", 5)\n    .attr(\"markerUnits\", \"strokeWidth\")\n    .attr(\"markerWidth\", 8)\n    .attr(\"markerHeight\", 6)\n    .attr(\"orient\", \"auto\");\n\n  var path = marker.append(\"path\")\n    .attr(\"d\", \"M 0 0 L 10 5 L 0 10 L 4 5 z\")\n    .style(\"stroke-width\", 1)\n    .style(\"stroke-dasharray\", \"1,0\");\n  util.applyStyle(path, edge[type + \"Style\"]);\n  if (edge[type + \"Class\"]) {\n    path.attr(\"class\", edge[type + \"Class\"]);\n  }\n}\n\nfunction undirected(parent, id, edge, type) {\n  var marker = parent.append(\"marker\")\n    .attr(\"id\", id)\n    .attr(\"viewBox\", \"0 0 10 10\")\n    .attr(\"refX\", 9)\n    .attr(\"refY\", 5)\n    .attr(\"markerUnits\", \"strokeWidth\")\n    .attr(\"markerWidth\", 8)\n    .attr(\"markerHeight\", 6)\n    .attr(\"orient\", \"auto\");\n\n  var path = marker.append(\"path\")\n    .attr(\"d\", \"M 0 5 L 10 5\")\n    .style(\"stroke-width\", 1)\n    .style(\"stroke-dasharray\", \"1,0\");\n  util.applyStyle(path, edge[type + \"Style\"]);\n  if (edge[type + \"Class\"]) {\n    path.attr(\"class\", edge[type + \"Class\"]);\n  }\n}\n\n},{\"./util\":27}],3:[function(require,module,exports){\nvar util = require(\"./util\"),\n    addLabel = require(\"./label/add-label\");\n\nmodule.exports = createClusters;\n\nfunction createClusters(selection, g) {\n  var clusters = g.nodes().filter(function(v) { return util.isSubgraph(g, v); }),\n      svgClusters = selection.selectAll(\"g.cluster\")\n        .data(clusters, function(v) { return v; });\n\n  svgClusters.selectAll(\"*\").remove();\n  svgClusters.enter()\n    .append(\"g\")\n      .attr(\"class\", \"cluster\")\n      .attr(\"id\",function(v){\n          var node = g.node(v);\n          return node.id;\n      })\n      .style(\"opacity\", 0);\n\n  util.applyTransition(svgClusters, g)\n    .style(\"opacity\", 1);\n\n  var itemQueue = [];\n  svgClusters.each(function(v) {\n    var node = g.node(v),\n        thisGroup = d3.select(this);\n    d3.select(this).append(\"rect\");\n    var labelGroup = thisGroup.append(\"g\").attr(\"class\", \"label\");\n    itemQueue.push(addLabel.createLabel(labelGroup, node, node.clusterLabelPos));\n  });\n\n  addLabel.styleLabels(itemQueue);\n\n  svgClusters.selectAll(\"rect\").each(function(c) {\n    var node = g.node(c);\n    var domCluster = d3.select(this);\n    util.applyStyle(domCluster, node.style);\n  });\n\n  util.applyTransition(svgClusters.exit(), g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  return svgClusters;\n}\n\n},{\"./label/add-label\":18,\"./util\":27}],4:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    addLabel = require(\"./label/add-label\"),\n    util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = createEdgeLabels;\n\nfunction createEdgeLabels(selection, g) {\n  var svgEdgeLabels = selection.selectAll(\"g.edgeLabel\")\n    .data(g.edges(), function(e) { return util.edgeToId(e); })\n    .classed(\"update\", true);\n\n  svgEdgeLabels.selectAll(\"*\").remove();\n  svgEdgeLabels.enter()\n    .append(\"g\")\n      .classed(\"edgeLabel\", true)\n      .style(\"opacity\", 0);\n\n  var itemQueue = [];\n  var labelQueue = [];\n\n  svgEdgeLabels.each(function(e) {\n    var edge = g.edge(e);\n\n    var label = addLabel.createLabel(d3.select(this), g.edge(e), 0, 0);\n\n    label.labelSvg.classed(\"label\", true);\n\n    labelQueue.push(label);\n\n    itemQueue.push({edge: edge, label: label.labelSvg});\n  });\n\n  addLabel.styleLabels(labelQueue);\n\n  itemQueue.forEach(function(item) {\n    item.bbox = item.label.node().getBBox();\n  });\n\n  itemQueue.forEach(function(item) {\n    var label = item.label;\n    var edge = item.edge;\n    var bbox = item.bbox;\n\n    if (edge.labelId) { label.attr(\"id\", edge.labelId); }\n    if (!_.has(edge, \"width\")) { edge.width = bbox.width; }\n    if (!_.has(edge, \"height\")) { edge.height = bbox.height; }\n  });\n\n  util.applyTransition(svgEdgeLabels.exit(), g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  return svgEdgeLabels;\n}\n\n},{\"./d3\":7,\"./label/add-label\":18,\"./lodash\":21,\"./util\":27}],5:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    intersectNode = require(\"./intersect/intersect-node\"),\n    util = require(\"./util\"),\n    d3 = require(\"./d3\");\nmodule.exports = createEdgePaths;\n\nfunction createEdgePaths(selection, g, arrows) {\n  var svgPaths = selection.selectAll(\"g.edgePath\")\n    .data(g.edges(), function(e) { return util.edgeToId(e); })\n    .classed(\"update\", true);\n\n  enter(svgPaths, g);\n  exit(svgPaths, g);\n\n  util.applyTransition(svgPaths, g)\n    .style(\"opacity\", 1);\n\n  // Save DOM element in the path group, and set ID and class\n  svgPaths.each(function(e) {\n    var domEdge = d3.select(this);\n    var edge = g.edge(e);\n    edge.elem = this;\n\n    if (edge.id) {\n      domEdge.attr(\"id\", edge.id);\n    }\n\n    util.applyClass(domEdge, edge[\"class\"],\n      (domEdge.classed(\"update\") ? \"update \" : \"\") + \"edgePath\");\n  });\n\n  svgPaths.selectAll(\"path.path\")\n    .each(function(e) {\n      var edge = g.edge(e);\n      edge.arrowheadId = _.uniqueId(\"arrowhead\");\n\n      var domEdge = d3.select(this)\n        .attr(\"marker-end\", function() {\n            return \"url(\" + makeFragmentRef(location.href, edge.arrowheadId) + \")\";\n        })\n        .style(\"fill\", \"none\");\n\n      util.applyTransition(domEdge, g)\n        .attr(\"d\", function(e) { return calcPoints(g, e); });\n\n      util.applyStyle(domEdge, edge.style);\n    });\n\n  svgPaths.selectAll(\"defs *\").remove();\n  svgPaths.selectAll(\"defs\")\n    .each(function(e) {\n      var edge = g.edge(e),\n          arrowhead = arrows[edge.arrowhead];\n      arrowhead(d3.select(this), edge.arrowheadId, edge, \"arrowhead\");\n    });\n\n  return svgPaths;\n}\n\nfunction makeFragmentRef(url, fragmentId) {\n  var baseUrl = url.split(\"#\")[0];\n  return baseUrl + \"#\" + fragmentId;\n}\n\nfunction calcPoints(g, e) {\n  var edge = g.edge(e),\n      tail = g.node(e.v),\n      head = g.node(e.w),\n      points = edge.points.slice(1, edge.points.length - 1);\n  points.unshift(intersectNode(tail, points[0]));\n  points.push(intersectNode(head, points[points.length - 1]));\n\n  return createLine(edge, points);\n}\n\nfunction createLine(edge, points) {\n  var line = d3.svg.line()\n    .x(function(d) { return d.x; })\n    .y(function(d) { return d.y; });\n\n  if (_.has(edge, \"lineInterpolate\")) {\n    line.interpolate(edge.lineInterpolate);\n  }\n\n  if (_.has(edge, \"lineTension\")) {\n    line.tension(Number(edge.lineTension));\n  }\n\n  return line(points);\n}\n\nfunction getCoords(elem) {\n  var bbox = elem.getBBox(),\n      matrix = elem.ownerSVGElement.getScreenCTM()\n        .inverse()\n        .multiply(elem.getScreenCTM())\n        .translate(bbox.width / 2, bbox.height / 2);\n  return { x: matrix.e, y: matrix.f };\n}\n\nfunction enter(svgPaths, g) {\n  var svgPathsEnter = svgPaths.enter()\n    .append(\"g\")\n      .attr(\"class\", \"edgePath\")\n      .style(\"opacity\", 0);\n  var s = svgPathsEnter.append(\"path\")\n    .attr(\"class\", \"path\");\n  var stashed = [];\n  s.data().map(function(e) {\n    var edge = g.edge(e),\n      sourceElem = g.node(e.v).elem,\n      points = _.range(edge.points.length).map(function() { return getCoords(sourceElem); });\n    stashed.push({el: e, edge: edge, points: points});\n  });\n  s.attr(\"d\", function(e, i) {\n    var specs = stashed[i];\n    if (!specs) {\n      return;\n    }\n    return createLine(specs.edge, specs.points);\n  });\n  svgPathsEnter.append(\"defs\");\n}\n\nfunction exit(svgPaths, g) {\n  var svgPathExit = svgPaths.exit();\n  util.applyTransition(svgPathExit, g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  util.applyTransition(svgPathExit.select(\"path.path\"), g)\n    .attr(\"d\", function(e) {\n      var source = g.node(e.v);\n\n      if (source) {\n        var points = _.range(this.getTotalLength()).map(function() { return source; });\n        return createLine({}, points);\n      } else {\n        return d3.select(this).attr(\"d\");\n      }\n    });\n}\n\n},{\"./d3\":7,\"./intersect/intersect-node\":14,\"./lodash\":21,\"./util\":27}],6:[function(require,module,exports){\n\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    addLabel = require(\"./label/add-label\"),\n    util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = createNodes;\n\nfunction createNodes(selection, g, shapes) {\n  var simpleNodes = g.nodes().filter(function(v) { return !util.isSubgraph(g, v); });\n  var svgNodes = selection.selectAll(\"g.node\")\n    .data(simpleNodes, function(v) { return v; })\n    .classed(\"update\", true);\n\n  svgNodes.selectAll(\"*\").remove();\n  svgNodes.enter()\n    .append(\"g\")\n      .attr(\"class\", \"node\")\n      .style(\"opacity\", 0);\n\n  // create queue for batch processing\n  // batch reading from then writing to DOM for increased performance\n  var itemQueue = [];\n  var labelQueue = [];\n\n  svgNodes.each(function(v) {\n    var node = g.node(v),\n        thisGroup = d3.select(this),\n        labelGroup = thisGroup.append(\"g\").attr(\"class\", \"label\"),\n        label = addLabel.createLabel(labelGroup, node),\n        labelDom = label.labelSvg;\n\n    labelQueue.push(label);\n\n    // add to queue for further processing\n    itemQueue.push({self: this, node: node, thisGroup: thisGroup, labelGroup: labelGroup, labelDom: labelDom});\n\n  });\n\n  addLabel.styleLabels(labelQueue);\n\n  // get bounding box for each label\n  itemQueue.forEach(function(item) {\n    item.bbox = _.pick(item.labelDom.node().getBBox(), \"width\", \"height\");\n  });\n\n  // apply styles with bbox info\n  itemQueue.forEach(function(item) {\n    var node = item.node,\n        thisGroup = item.thisGroup,\n        labelGroup = item.labelGroup,\n        self = item.self,\n        bbox = item.bbox;\n\n    var shape = shapes[node.shape];\n\n    node.elem = self;\n\n    if (node.id) { thisGroup.attr(\"id\", node.id); }\n    if (node.labelId) { labelGroup.attr(\"id\", node.labelId); }\n    util.applyClass(thisGroup, node[\"class\"],\n      (thisGroup.classed(\"update\") ? \"update \" : \"\") + \"node\");\n\n    if (_.has(node, \"width\")) { bbox.width = node.width; }\n    if (_.has(node, \"height\")) { bbox.height = node.height; }\n\n    bbox.width += node.paddingLeft + node.paddingRight;\n    bbox.height += node.paddingTop + node.paddingBottom;\n    labelGroup.attr(\"transform\", \"translate(\" +\n      ((node.paddingLeft - node.paddingRight) / 2) + \",\" +\n      ((node.paddingTop - node.paddingBottom) / 2) + \")\");\n\n    item.shapeSvg = shape(d3.select(self), bbox, node);\n  });\n\n  itemQueue.forEach(function(item) {\n    util.applyStyle(item.shapeSvg, item.node.style);\n  });\n\n  itemQueue.forEach(function(item) {\n    item.shapeBBox = item.shapeSvg.node().getBBox();\n  });\n\n  itemQueue.forEach(function(item) {\n    item.node.width = item.shapeBBox.width;\n    item.node.height = item.shapeBBox.height;\n  });\n\n  util.applyTransition(svgNodes.exit(), g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  return svgNodes;\n}\n\n},{\"./d3\":7,\"./label/add-label\":18,\"./lodash\":21,\"./util\":27}],7:[function(require,module,exports){\n// Stub to get D3 either via NPM or from the global object\nmodule.exports = window.d3;\n\n},{}],8:[function(require,module,exports){\n/* global window */\n\nvar dagre;\n\nif (require) {\n  try {\n    dagre = require(\"dagre\");\n  } catch (e) {}\n}\n\nif (!dagre) {\n  dagre = window.dagre;\n}\n\nmodule.exports = dagre;\n\n},{\"dagre\":undefined}],9:[function(require,module,exports){\n/* global window */\n\nvar graphlib;\n\nif (require) {\n  try {\n    graphlib = require(\"graphlib\");\n  } catch (e) {}\n}\n\nif (!graphlib) {\n  graphlib = window.graphlib;\n}\n\nmodule.exports = graphlib;\n\n},{\"graphlib\":undefined}],10:[function(require,module,exports){\nmodule.exports = {\n  node: require(\"./intersect-node\"),\n  circle: require(\"./intersect-circle\"),\n  ellipse: require(\"./intersect-ellipse\"),\n  polygon: require(\"./intersect-polygon\"),\n  rect: require(\"./intersect-rect\")\n};\n\n},{\"./intersect-circle\":11,\"./intersect-ellipse\":12,\"./intersect-node\":14,\"./intersect-polygon\":15,\"./intersect-rect\":16}],11:[function(require,module,exports){\nvar intersectEllipse = require(\"./intersect-ellipse\");\n\nmodule.exports = intersectCircle;\n\nfunction intersectCircle(node, rx, point) {\n  return intersectEllipse(node, rx, rx, point);\n}\n\n},{\"./intersect-ellipse\":12}],12:[function(require,module,exports){\nmodule.exports = intersectEllipse;\n\nfunction intersectEllipse(node, rx, ry, point) {\n  // Formulae from: http://mathworld.wolfram.com/Ellipse-LineIntersection.html\n\n  var cx = node.x;\n  var cy = node.y;\n\n  var px = cx - point.x;\n  var py = cy - point.y;\n\n  var det = Math.sqrt(rx * rx * py * py + ry * ry * px * px);\n\n  var dx = Math.abs(rx * ry * px / det);\n  if (point.x < cx) {\n    dx = -dx;\n  }\n  var dy = Math.abs(rx * ry * py / det);\n  if (point.y < cy) {\n    dy = -dy;\n  }\n\n  return {x: cx + dx, y: cy + dy};\n}\n\n\n},{}],13:[function(require,module,exports){\nmodule.exports = intersectLine;\n\n/*\n * Returns the point at which two lines, p and q, intersect or returns\n * undefined if they do not intersect.\n */\nfunction intersectLine(p1, p2, q1, q2) {\n  // Algorithm from J. Avro, (ed.) Graphics Gems, No 2, Morgan Kaufmann, 1994,\n  // p7 and p473.\n\n  var a1, a2, b1, b2, c1, c2;\n  var r1, r2 , r3, r4;\n  var denom, offset, num;\n  var x, y;\n\n  // Compute a1, b1, c1, where line joining points 1 and 2 is F(x,y) = a1 x +\n  // b1 y + c1 = 0.\n  a1 = p2.y - p1.y;\n  b1 = p1.x - p2.x;\n  c1 = (p2.x * p1.y) - (p1.x * p2.y);\n\n  // Compute r3 and r4.\n  r3 = ((a1 * q1.x) + (b1 * q1.y) + c1);\n  r4 = ((a1 * q2.x) + (b1 * q2.y) + c1);\n\n  // Check signs of r3 and r4. If both point 3 and point 4 lie on\n  // same side of line 1, the line segments do not intersect.\n  if ((r3 !== 0) && (r4 !== 0) && sameSign(r3, r4)) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Compute a2, b2, c2 where line joining points 3 and 4 is G(x,y) = a2 x + b2 y + c2 = 0\n  a2 = q2.y - q1.y;\n  b2 = q1.x - q2.x;\n  c2 = (q2.x * q1.y) - (q1.x * q2.y);\n\n  // Compute r1 and r2\n  r1 = (a2 * p1.x) + (b2 * p1.y) + c2;\n  r2 = (a2 * p2.x) + (b2 * p2.y) + c2;\n\n  // Check signs of r1 and r2. If both point 1 and point 2 lie\n  // on same side of second line segment, the line segments do\n  // not intersect.\n  if ((r1 !== 0) && (r2 !== 0) && (sameSign(r1, r2))) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Line segments intersect: compute intersection point.\n  denom = (a1 * b2) - (a2 * b1);\n  if (denom === 0) {\n    return /*COLLINEAR*/;\n  }\n\n  offset = Math.abs(denom / 2);\n\n  // The denom/2 is to get rounding instead of truncating. It\n  // is added or subtracted to the numerator, depending upon the\n  // sign of the numerator.\n  num = (b1 * c2) - (b2 * c1);\n  x = (num < 0) ? ((num - offset) / denom) : ((num + offset) / denom);\n\n  num = (a2 * c1) - (a1 * c2);\n  y = (num < 0) ? ((num - offset) / denom) : ((num + offset) / denom);\n\n  return { x: x, y: y };\n}\n\nfunction sameSign(r1, r2) {\n  return r1 * r2 > 0;\n}\n\n},{}],14:[function(require,module,exports){\nmodule.exports = intersectNode;\n\nfunction intersectNode(node, point) {\n  return node.intersect(point);\n}\n\n},{}],15:[function(require,module,exports){\nvar intersectLine = require(\"./intersect-line\");\n\nmodule.exports = intersectPolygon;\n\n/*\n * Returns the point ({x, y}) at which the point argument intersects with the\n * node argument assuming that it has the shape specified by polygon.\n */\nfunction intersectPolygon(node, polyPoints, point) {\n  var x1 = node.x;\n  var y1 = node.y;\n\n  var intersections = [];\n\n  var minX = Number.POSITIVE_INFINITY,\n      minY = Number.POSITIVE_INFINITY;\n  polyPoints.forEach(function(entry) {\n    minX = Math.min(minX, entry.x);\n    minY = Math.min(minY, entry.y);\n  });\n\n  var left = x1 - node.width / 2 - minX;\n  var top =  y1 - node.height / 2 - minY;\n\n  for (var i = 0; i < polyPoints.length; i++) {\n    var p1 = polyPoints[i];\n    var p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];\n    var intersect = intersectLine(node, point,\n      {x: left + p1.x, y: top + p1.y}, {x: left + p2.x, y: top + p2.y});\n    if (intersect) {\n      intersections.push(intersect);\n    }\n  }\n\n  if (!intersections.length) {\n    console.log(\"NO INTERSECTION FOUND, RETURN NODE CENTER\", node);\n    return node;\n  }\n\n  if (intersections.length > 1) {\n    // More intersections, find the one nearest to edge end point\n    intersections.sort(function(p, q) {\n      var pdx = p.x - point.x,\n          pdy = p.y - point.y,\n          distp = Math.sqrt(pdx * pdx + pdy * pdy),\n\n          qdx = q.x - point.x,\n          qdy = q.y - point.y,\n          distq = Math.sqrt(qdx * qdx + qdy * qdy);\n\n      return (distp < distq) ? -1 : (distp === distq ? 0 : 1);\n    });\n  }\n  return intersections[0];\n}\n\n},{\"./intersect-line\":13}],16:[function(require,module,exports){\nmodule.exports = intersectRect;\n\nfunction intersectRect(node, point) {\n  var x = node.x;\n  var y = node.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = node.width / 2;\n  var h = node.height / 2;\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = dy === 0 ? 0 : h * dx / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = dx === 0 ? 0 : w * dy / dx;\n  }\n\n  return {x: x + sx, y: y + sy};\n}\n\n},{}],17:[function(require,module,exports){\nvar util = require(\"../util\");\n\nmodule.exports = addHtmlLabel;\n\nfunction addHtmlLabel(root, node) {\n  var fo = root\n    .append(\"foreignObject\")\n      .attr(\"width\", \"100000\");\n\n  var div = fo\n    .append(\"xhtml:div\");\n  div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n\n  var label = node.label;\n  switch(typeof label) {\n    case \"function\":\n      div.insert(label);\n      break;\n    case \"object\":\n      // Currently we assume this is a DOM object.\n      div.insert(function() { return label; });\n      break;\n    default: div.html(label);\n  }\n\n  util.applyStyle(div, node.labelStyle);\n  div.style(\"display\", \"inline-block\");\n  // Fix for firefox\n  div.style(\"white-space\", \"nowrap\");\n\n  var client = div[0][0].getBoundingClientRect();\n  fo\n    .attr(\"width\", client.width)\n    .attr(\"height\", client.height); \n\n  return fo;\n}\n\n},{\"../util\":27}],18:[function(require,module,exports){\nvar addTextLabel = require(\"./add-text-label\"),\n    addHtmlLabel = require(\"./add-html-label\"),\n    addSVGLabel  = require(\"./add-svg-label\");\n\n\nfunction createLabel(root, node, location) {\n  var label = node.label;\n  var labelSvg = root.append(\"g\");\n\n  // Allow the label to be a string, a function that returns a DOM element, or\n  // a DOM element itself.\n  if (node.labelType === \"svg\") {\n    addSVGLabel(labelSvg, node);\n  } else if (typeof label !== \"string\" || node.labelType === \"html\") {\n    addHtmlLabel(labelSvg, node);\n  } else {\n    addTextLabel(labelSvg, node);\n  }\n\n  return {labelSvg: labelSvg, node: node, location: location};\n\n}\n\nfunction getLabelBBox(item) {\n  item.labelBBox = item.labelSvg.node().getBBox();\n}\n\nfunction finishStyling(item) {\n  var node = item.node;\n  var labelSvg = item.labelSvg;\n  var labelBBox = item.labelBBox;\n  var location = item.location;\n\n  var y;\n  switch(location) {\n    case \"top\":\n      y = (-node.height / 2);\n      break;\n    case \"bottom\":\n      y = (node.height / 2) - labelBBox.height;\n      break;\n    default:\n      y = (-labelBBox.height / 2);\n  }\n  labelSvg.attr(\"transform\",\n      \"translate(\" + (-labelBBox.width / 2) + \",\" + y + \")\");\n\n  return labelSvg;\n}\n\nfunction styleLabels(items) {\n  items.forEach(getLabelBBox);\n\n  return items.map(finishStyling);\n}\n\n\nmodule.exports.createLabel = createLabel;\nmodule.exports.getLabelBBox = getLabelBBox;\nmodule.exports.finishStyling = finishStyling;\nmodule.exports.styleLabels = styleLabels;\n\n},{\"./add-html-label\":17,\"./add-svg-label\":19,\"./add-text-label\":20}],19:[function(require,module,exports){\nvar util = require(\"../util\");\n\nmodule.exports = addSVGLabel;\n\nfunction addSVGLabel(root, node) {\n  var domNode = root;\n\n  domNode.node().appendChild(node.label);\n\n  util.applyStyle(domNode, node.labelStyle);\n\n  return domNode;\n}\n\n},{\"../util\":27}],20:[function(require,module,exports){\nvar util = require(\"../util\");\n\nmodule.exports = addTextLabel;\n\n/*\n * Attaches a text label to the specified root. Handles escape sequences.\n */\nfunction addTextLabel(root, node) {\n  var domNode = root.append(\"text\");\n\n  var lines = processEscapeSequences(node.label).split(\"\\n\");\n  for (var i = 0; i < lines.length; i++) {\n    domNode\n      .append(\"tspan\")\n        .attr(\"xml:space\", \"preserve\")\n        .attr(\"dy\", \"1em\")\n        .attr(\"x\", \"1\")\n        .text(lines[i]);\n  }\n\n  util.applyStyle(domNode, node.labelStyle);\n\n  return domNode;\n}\n\nfunction processEscapeSequences(text) {\n  var newText = \"\",\n      escaped = false,\n      ch;\n  for (var i = 0; i < text.length; ++i) {\n    ch = text[i];\n    if (escaped) {\n      switch(ch) {\n        case \"n\": newText += \"\\n\"; break;\n        default: newText += ch;\n      }\n      escaped = false;\n    } else if (ch === \"\\\\\") {\n      escaped = true;\n    } else {\n      newText += ch;\n    }\n  }\n  return newText;\n}\n\n},{\"../util\":27}],21:[function(require,module,exports){\n/* global window */\n\nvar lodash;\n\nif (require) {\n  try {\n    lodash = require(\"lodash\");\n  } catch (e) {}\n}\n\nif (!lodash) {\n  lodash = window._;\n}\n\nmodule.exports = lodash;\n\n},{\"lodash\":undefined}],22:[function(require,module,exports){\n\"use strict\";\n\nvar util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = positionClusters;\n\nfunction positionClusters(selection, g) {\n  var created = selection.filter(function() { return !d3.select(this).classed(\"update\"); });\n\n  function translate(v) {\n    var node = g.node(v);\n    return \"translate(\" + node.x + \",\" + node.y + \")\";\n  }\n\n  created.attr(\"transform\", translate);\n\n  util.applyTransition(selection, g)\n      .style(\"opacity\", 1)\n      .attr(\"transform\", translate);\n\n  util.applyTransition(created.selectAll(\"rect\"), g)\n      .attr(\"width\", function(v) { return g.node(v).width; })\n      .attr(\"height\", function(v) { return g.node(v).height; })\n      .attr(\"x\", function(v) {\n        var node = g.node(v);\n        return -node.width / 2;\n      })\n      .attr(\"y\", function(v) {\n        var node = g.node(v);\n        return -node.height / 2;\n      });\n\n}\n\n},{\"./d3\":7,\"./util\":27}],23:[function(require,module,exports){\n\"use strict\";\n\nvar util = require(\"./util\"),\n    d3 = require(\"./d3\"),\n    _ = require(\"./lodash\");\n\nmodule.exports = positionEdgeLabels;\n\nfunction positionEdgeLabels(selection, g) {\n  var created = selection.filter(function() { return !d3.select(this).classed(\"update\"); });\n\n  function translate(e) {\n    var edge = g.edge(e);\n    return _.has(edge, \"x\") ? \"translate(\" + edge.x + \",\" + edge.y + \")\" : \"\";\n  }\n\n  created.attr(\"transform\", translate);\n\n  util.applyTransition(selection, g)\n    .style(\"opacity\", 1)\n    .attr(\"transform\", translate);\n}\n\n},{\"./d3\":7,\"./lodash\":21,\"./util\":27}],24:[function(require,module,exports){\n\"use strict\";\n\nvar util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = positionNodes;\n\nfunction positionNodes(selection, g) {\n  var created = selection.filter(function() { return !d3.select(this).classed(\"update\"); });\n\n  function translate(v) {\n    var node = g.node(v);\n    return \"translate(\" + node.x + \",\" + node.y + \")\";\n  }\n\n  created.attr(\"transform\", translate);\n\n  util.applyTransition(selection, g)\n    .style(\"opacity\", 1)\n    .attr(\"transform\", translate);\n}\n\n},{\"./d3\":7,\"./util\":27}],25:[function(require,module,exports){\nvar _ = require(\"./lodash\"),\n    layout = require(\"./dagre\").layout;\n\nmodule.exports = render;\n\n// This design is based on http://bost.ocks.org/mike/chart/.\nfunction render() {\n  var createNodes = require(\"./create-nodes\"),\n      createClusters = require(\"./create-clusters\"),\n      createEdgeLabels = require(\"./create-edge-labels\"),\n      createEdgePaths = require(\"./create-edge-paths\"),\n      positionNodes = require(\"./position-nodes\"),\n      positionEdgeLabels = require(\"./position-edge-labels\"),\n      positionClusters = require(\"./position-clusters\"),\n      shapes = require(\"./shapes\"),\n      arrows = require(\"./arrows\");\n\n  var fn = function(svg, g) {\n    preProcessGraph(g);\n\n    var outputGroup = createOrSelectGroup(svg, \"output\"),\n        clustersGroup = createOrSelectGroup(outputGroup, \"clusters\"),\n        edgePathsGroup = createOrSelectGroup(outputGroup, \"edgePaths\"),\n        edgeLabels = createEdgeLabels(createOrSelectGroup(outputGroup, \"edgeLabels\"), g),\n        nodes = createNodes(createOrSelectGroup(outputGroup, \"nodes\"), g, shapes);\n\n    layout(g);\n\n    positionNodes(nodes, g);\n    positionEdgeLabels(edgeLabels, g);\n    createEdgePaths(edgePathsGroup, g, arrows);\n\n    var clusters = createClusters(clustersGroup, g);\n    positionClusters(clusters, g);\n\n    postProcessGraph(g);\n  };\n\n  fn.createNodes = function(value) {\n    if (!arguments.length) return createNodes;\n    createNodes = value;\n    return fn;\n  };\n\n  fn.createClusters = function(value) {\n    if (!arguments.length) return createClusters;\n    createClusters = value;\n    return fn;\n  };\n\n  fn.createEdgeLabels = function(value) {\n    if (!arguments.length) return createEdgeLabels;\n    createEdgeLabels = value;\n    return fn;\n  };\n\n  fn.createEdgePaths = function(value) {\n    if (!arguments.length) return createEdgePaths;\n    createEdgePaths = value;\n    return fn;\n  };\n\n  fn.shapes = function(value) {\n    if (!arguments.length) return shapes;\n    shapes = value;\n    return fn;\n  };\n\n  fn.arrows = function(value) {\n    if (!arguments.length) return arrows;\n    arrows = value;\n    return fn;\n  };\n\n  return fn;\n}\n\nvar NODE_DEFAULT_ATTRS = {\n  paddingLeft: 10,\n  paddingRight: 10,\n  paddingTop: 10,\n  paddingBottom: 10,\n  rx: 0,\n  ry: 0,\n  shape: \"rect\"\n};\n\nvar EDGE_DEFAULT_ATTRS = {\n  arrowhead: \"normal\",\n  lineInterpolate: \"linear\"\n};\n\nfunction preProcessGraph(g) {\n  g.nodes().forEach(function(v) {\n    var node = g.node(v);\n    if (!_.has(node, \"label\") && !g.children(v).length) { node.label = v; }\n\n    if (_.has(node, \"paddingX\")) {\n      _.defaults(node, {\n        paddingLeft: node.paddingX,\n        paddingRight: node.paddingX\n      });\n    }\n\n    if (_.has(node, \"paddingY\")) {\n      _.defaults(node, {\n        paddingTop: node.paddingY,\n        paddingBottom: node.paddingY\n      });\n    }\n\n    if (_.has(node, \"padding\")) {\n      _.defaults(node, {\n        paddingLeft: node.padding,\n        paddingRight: node.padding,\n        paddingTop: node.padding,\n        paddingBottom: node.padding\n      });\n    }\n\n    _.defaults(node, NODE_DEFAULT_ATTRS);\n\n    _.each([\"paddingLeft\", \"paddingRight\", \"paddingTop\", \"paddingBottom\"], function(k) {\n      node[k] = Number(node[k]);\n    });\n\n    // Save dimensions for restore during post-processing\n    if (_.has(node, \"width\")) { node._prevWidth = node.width; }\n    if (_.has(node, \"height\")) { node._prevHeight = node.height; }\n  });\n\n  g.edges().forEach(function(e) {\n    var edge = g.edge(e);\n    if (!_.has(edge, \"label\")) { edge.label = \"\"; }\n    _.defaults(edge, EDGE_DEFAULT_ATTRS);\n  });\n}\n\nfunction postProcessGraph(g) {\n  _.each(g.nodes(), function(v) {\n    var node = g.node(v);\n\n    // Restore original dimensions\n    if (_.has(node, \"_prevWidth\")) {\n      node.width = node._prevWidth;\n    } else {\n      delete node.width;\n    }\n\n    if (_.has(node, \"_prevHeight\")) {\n      node.height = node._prevHeight;\n    } else {\n      delete node.height;\n    }\n\n    delete node._prevWidth;\n    delete node._prevHeight;\n  });\n}\n\nfunction createOrSelectGroup(root, name) {\n  var selection = root.select(\"g.\" + name);\n  if (selection.empty()) {\n    selection = root.append(\"g\").attr(\"class\", name);\n  }\n  return selection;\n}\n\n},{\"./arrows\":2,\"./create-clusters\":3,\"./create-edge-labels\":4,\"./create-edge-paths\":5,\"./create-nodes\":6,\"./dagre\":8,\"./lodash\":21,\"./position-clusters\":22,\"./position-edge-labels\":23,\"./position-nodes\":24,\"./shapes\":26}],26:[function(require,module,exports){\n\"use strict\";\n\nvar intersectRect = require(\"./intersect/intersect-rect\"),\n    intersectEllipse = require(\"./intersect/intersect-ellipse\"),\n    intersectCircle = require(\"./intersect/intersect-circle\"),\n    intersectPolygon = require(\"./intersect/intersect-polygon\");\n\nmodule.exports = {\n  rect: rect,\n  ellipse: ellipse,\n  circle: circle,\n  diamond: diamond\n};\n\nfunction rect(parent, bbox, node) {\n  var shapeSvg = parent.insert(\"rect\", \":first-child\")\n        .attr(\"rx\", node.rx)\n        .attr(\"ry\", node.ry)\n        .attr(\"x\", -bbox.width / 2)\n        .attr(\"y\", -bbox.height / 2)\n        .attr(\"width\", bbox.width)\n        .attr(\"height\", bbox.height);\n\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction ellipse(parent, bbox, node) {\n  var rx = bbox.width / 2,\n      ry = bbox.height / 2,\n      shapeSvg = parent.insert(\"ellipse\", \":first-child\")\n        .attr(\"x\", -bbox.width / 2)\n        .attr(\"y\", -bbox.height / 2)\n        .attr(\"rx\", rx)\n        .attr(\"ry\", ry);\n\n  node.intersect = function(point) {\n    return intersectEllipse(node, rx, ry, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction circle(parent, bbox, node) {\n  var r = Math.max(bbox.width, bbox.height) / 2,\n      shapeSvg = parent.insert(\"circle\", \":first-child\")\n        .attr(\"x\", -bbox.width / 2)\n        .attr(\"y\", -bbox.height / 2)\n        .attr(\"r\", r);\n\n  node.intersect = function(point) {\n    return intersectCircle(node, r, point);\n  };\n\n  return shapeSvg;\n}\n\n// Circumscribe an ellipse for the bounding box with a diamond shape. I derived\n// the function to calculate the diamond shape from:\n// http://mathforum.org/kb/message.jspa?messageID=3750236\nfunction diamond(parent, bbox, node) {\n  var w = (bbox.width * Math.SQRT2) / 2,\n      h = (bbox.height * Math.SQRT2) / 2,\n      points = [\n        { x:  0, y: -h },\n        { x: -w, y:  0 },\n        { x:  0, y:  h },\n        { x:  w, y:  0 }\n      ],\n      shapeSvg = parent.insert(\"polygon\", \":first-child\")\n        .attr(\"points\", points.map(function(p) { return p.x + \",\" + p.y; }).join(\" \"));\n\n  node.intersect = function(p) {\n    return intersectPolygon(node, points, p);\n  };\n\n  return shapeSvg;\n}\n\n},{\"./intersect/intersect-circle\":11,\"./intersect/intersect-ellipse\":12,\"./intersect/intersect-polygon\":15,\"./intersect/intersect-rect\":16}],27:[function(require,module,exports){\nvar _ = require(\"./lodash\");\n\n// Public utility functions\nmodule.exports = {\n  isSubgraph: isSubgraph,\n  edgeToId: edgeToId,\n  applyStyle: applyStyle,\n  applyClass: applyClass,\n  applyTransition: applyTransition\n};\n\n/*\n * Returns true if the specified node in the graph is a subgraph node. A\n * subgraph node is one that contains other nodes.\n */\nfunction isSubgraph(g, v) {\n  return !!g.children(v).length;\n}\n\nfunction edgeToId(e) {\n  return escapeId(e.v) + \":\" + escapeId(e.w) + \":\" + escapeId(e.name);\n}\n\nvar ID_DELIM = /:/g;\nfunction escapeId(str) {\n  return str ? String(str).replace(ID_DELIM, \"\\\\:\") : \"\";\n}\n\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr(\"style\", styleFn);\n  }\n}\n\nfunction applyClass(dom, classFn, otherClasses) {\n  if (classFn) {\n    dom\n      .attr(\"class\", classFn)\n      .attr(\"class\", otherClasses + \" \" + dom.attr(\"class\"));\n  }\n}\n\nfunction applyTransition(selection, g) {\n  var graph = g.graph();\n\n  if (_.isPlainObject(graph)) {\n    var transition = graph.transition;\n    if (_.isFunction(transition)) {\n      return transition(selection);\n    }\n  }\n\n  return selection;\n}\n\n},{\"./lodash\":21}],28:[function(require,module,exports){\nmodule.exports = \"0.4.18\";\n\n},{}]},{},[1])(1)\n});\n\n","var util = require(\"./util\");\n\nmodule.exports = {\n  \"default\": normal,\n  \"normal\": normal,\n  \"vee\": vee,\n  \"undirected\": undirected\n};\n\nfunction normal(parent, id, edge, type) {\n  var marker = parent.append(\"marker\")\n    .attr(\"id\", id)\n    .attr(\"viewBox\", \"0 0 10 10\")\n    .attr(\"refX\", 9)\n    .attr(\"refY\", 5)\n    .attr(\"markerUnits\", \"strokeWidth\")\n    .attr(\"markerWidth\", 8)\n    .attr(\"markerHeight\", 6)\n    .attr(\"orient\", \"auto\");\n\n  var path = marker.append(\"path\")\n    .attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\")\n    .style(\"stroke-width\", 1)\n    .style(\"stroke-dasharray\", \"1,0\");\n  util.applyStyle(path, edge[type + \"Style\"]);\n  if (edge[type + \"Class\"]) {\n    path.attr(\"class\", edge[type + \"Class\"]);\n  }\n}\n\nfunction vee(parent, id, edge, type) {\n  var marker = parent.append(\"marker\")\n    .attr(\"id\", id)\n    .attr(\"viewBox\", \"0 0 10 10\")\n    .attr(\"refX\", 9)\n    .attr(\"refY\", 5)\n    .attr(\"markerUnits\", \"strokeWidth\")\n    .attr(\"markerWidth\", 8)\n    .attr(\"markerHeight\", 6)\n    .attr(\"orient\", \"auto\");\n\n  var path = marker.append(\"path\")\n    .attr(\"d\", \"M 0 0 L 10 5 L 0 10 L 4 5 z\")\n    .style(\"stroke-width\", 1)\n    .style(\"stroke-dasharray\", \"1,0\");\n  util.applyStyle(path, edge[type + \"Style\"]);\n  if (edge[type + \"Class\"]) {\n    path.attr(\"class\", edge[type + \"Class\"]);\n  }\n}\n\nfunction undirected(parent, id, edge, type) {\n  var marker = parent.append(\"marker\")\n    .attr(\"id\", id)\n    .attr(\"viewBox\", \"0 0 10 10\")\n    .attr(\"refX\", 9)\n    .attr(\"refY\", 5)\n    .attr(\"markerUnits\", \"strokeWidth\")\n    .attr(\"markerWidth\", 8)\n    .attr(\"markerHeight\", 6)\n    .attr(\"orient\", \"auto\");\n\n  var path = marker.append(\"path\")\n    .attr(\"d\", \"M 0 5 L 10 5\")\n    .style(\"stroke-width\", 1)\n    .style(\"stroke-dasharray\", \"1,0\");\n  util.applyStyle(path, edge[type + \"Style\"]);\n  if (edge[type + \"Class\"]) {\n    path.attr(\"class\", edge[type + \"Class\"]);\n  }\n}\n","var util = require(\"./util\"),\n    addLabel = require(\"./label/add-label\");\n\nmodule.exports = createClusters;\n\nfunction createClusters(selection, g) {\n  var clusters = g.nodes().filter(function(v) { return util.isSubgraph(g, v); }),\n      svgClusters = selection.selectAll(\"g.cluster\")\n        .data(clusters, function(v) { return v; });\n\n  svgClusters.selectAll(\"*\").remove();\n  svgClusters.enter()\n    .append(\"g\")\n      .attr(\"class\", \"cluster\")\n      .attr(\"id\",function(v){\n          var node = g.node(v);\n          return node.id;\n      })\n      .style(\"opacity\", 0);\n\n  util.applyTransition(svgClusters, g)\n    .style(\"opacity\", 1);\n\n  var itemQueue = [];\n  svgClusters.each(function(v) {\n    var node = g.node(v),\n        thisGroup = d3.select(this);\n    d3.select(this).append(\"rect\");\n    var labelGroup = thisGroup.append(\"g\").attr(\"class\", \"label\");\n    itemQueue.push(addLabel.createLabel(labelGroup, node, node.clusterLabelPos));\n  });\n\n  addLabel.styleLabels(itemQueue);\n\n  svgClusters.selectAll(\"rect\").each(function(c) {\n    var node = g.node(c);\n    var domCluster = d3.select(this);\n    util.applyStyle(domCluster, node.style);\n  });\n\n  util.applyTransition(svgClusters.exit(), g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  return svgClusters;\n}\n","\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    addLabel = require(\"./label/add-label\"),\n    util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = createEdgeLabels;\n\nfunction createEdgeLabels(selection, g) {\n  var svgEdgeLabels = selection.selectAll(\"g.edgeLabel\")\n    .data(g.edges(), function(e) { return util.edgeToId(e); })\n    .classed(\"update\", true);\n\n  svgEdgeLabels.selectAll(\"*\").remove();\n  svgEdgeLabels.enter()\n    .append(\"g\")\n      .classed(\"edgeLabel\", true)\n      .style(\"opacity\", 0);\n\n  var itemQueue = [];\n  var labelQueue = [];\n\n  svgEdgeLabels.each(function(e) {\n    var edge = g.edge(e);\n\n    var label = addLabel.createLabel(d3.select(this), g.edge(e), 0, 0);\n\n    label.labelSvg.classed(\"label\", true);\n\n    labelQueue.push(label);\n\n    itemQueue.push({edge: edge, label: label.labelSvg});\n  });\n\n  addLabel.styleLabels(labelQueue);\n\n  itemQueue.forEach(function(item) {\n    item.bbox = item.label.node().getBBox();\n  });\n\n  itemQueue.forEach(function(item) {\n    var label = item.label;\n    var edge = item.edge;\n    var bbox = item.bbox;\n\n    if (edge.labelId) { label.attr(\"id\", edge.labelId); }\n    if (!_.has(edge, \"width\")) { edge.width = bbox.width; }\n    if (!_.has(edge, \"height\")) { edge.height = bbox.height; }\n  });\n\n  util.applyTransition(svgEdgeLabels.exit(), g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  return svgEdgeLabels;\n}\n","\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    intersectNode = require(\"./intersect/intersect-node\"),\n    util = require(\"./util\"),\n    d3 = require(\"./d3\");\nmodule.exports = createEdgePaths;\n\nfunction createEdgePaths(selection, g, arrows) {\n  var svgPaths = selection.selectAll(\"g.edgePath\")\n    .data(g.edges(), function(e) { return util.edgeToId(e); })\n    .classed(\"update\", true);\n\n  enter(svgPaths, g);\n  exit(svgPaths, g);\n\n  util.applyTransition(svgPaths, g)\n    .style(\"opacity\", 1);\n\n  // Save DOM element in the path group, and set ID and class\n  svgPaths.each(function(e) {\n    var domEdge = d3.select(this);\n    var edge = g.edge(e);\n    edge.elem = this;\n\n    if (edge.id) {\n      domEdge.attr(\"id\", edge.id);\n    }\n\n    util.applyClass(domEdge, edge[\"class\"],\n      (domEdge.classed(\"update\") ? \"update \" : \"\") + \"edgePath\");\n  });\n\n  svgPaths.selectAll(\"path.path\")\n    .each(function(e) {\n      var edge = g.edge(e);\n      edge.arrowheadId = _.uniqueId(\"arrowhead\");\n\n      var domEdge = d3.select(this)\n        .attr(\"marker-end\", function() {\n            return \"url(\" + makeFragmentRef(location.href, edge.arrowheadId) + \")\";\n        })\n        .style(\"fill\", \"none\");\n\n      util.applyTransition(domEdge, g)\n        .attr(\"d\", function(e) { return calcPoints(g, e); });\n\n      util.applyStyle(domEdge, edge.style);\n    });\n\n  svgPaths.selectAll(\"defs *\").remove();\n  svgPaths.selectAll(\"defs\")\n    .each(function(e) {\n      var edge = g.edge(e),\n          arrowhead = arrows[edge.arrowhead];\n      arrowhead(d3.select(this), edge.arrowheadId, edge, \"arrowhead\");\n    });\n\n  return svgPaths;\n}\n\nfunction makeFragmentRef(url, fragmentId) {\n  var baseUrl = url.split(\"#\")[0];\n  return baseUrl + \"#\" + fragmentId;\n}\n\nfunction calcPoints(g, e) {\n  var edge = g.edge(e),\n      tail = g.node(e.v),\n      head = g.node(e.w),\n      points = edge.points.slice(1, edge.points.length - 1);\n  points.unshift(intersectNode(tail, points[0]));\n  points.push(intersectNode(head, points[points.length - 1]));\n\n  return createLine(edge, points);\n}\n\nfunction createLine(edge, points) {\n  var line = d3.svg.line()\n    .x(function(d) { return d.x; })\n    .y(function(d) { return d.y; });\n\n  if (_.has(edge, \"lineInterpolate\")) {\n    line.interpolate(edge.lineInterpolate);\n  }\n\n  if (_.has(edge, \"lineTension\")) {\n    line.tension(Number(edge.lineTension));\n  }\n\n  return line(points);\n}\n\nfunction getCoords(elem) {\n  var bbox = elem.getBBox(),\n      matrix = elem.ownerSVGElement.getScreenCTM()\n        .inverse()\n        .multiply(elem.getScreenCTM())\n        .translate(bbox.width / 2, bbox.height / 2);\n  return { x: matrix.e, y: matrix.f };\n}\n\nfunction enter(svgPaths, g) {\n  var svgPathsEnter = svgPaths.enter()\n    .append(\"g\")\n      .attr(\"class\", \"edgePath\")\n      .style(\"opacity\", 0);\n  var s = svgPathsEnter.append(\"path\")\n    .attr(\"class\", \"path\");\n  var stashed = [];\n  s.data().map(function(e) {\n    var edge = g.edge(e),\n      sourceElem = g.node(e.v).elem,\n      points = _.range(edge.points.length).map(function() { return getCoords(sourceElem); });\n    stashed.push({el: e, edge: edge, points: points});\n  });\n  s.attr(\"d\", function(e, i) {\n    var specs = stashed[i];\n    if (!specs) {\n      return;\n    }\n    return createLine(specs.edge, specs.points);\n  });\n  svgPathsEnter.append(\"defs\");\n}\n\nfunction exit(svgPaths, g) {\n  var svgPathExit = svgPaths.exit();\n  util.applyTransition(svgPathExit, g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  util.applyTransition(svgPathExit.select(\"path.path\"), g)\n    .attr(\"d\", function(e) {\n      var source = g.node(e.v);\n\n      if (source) {\n        var points = _.range(this.getTotalLength()).map(function() { return source; });\n        return createLine({}, points);\n      } else {\n        return d3.select(this).attr(\"d\");\n      }\n    });\n}\n","\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    addLabel = require(\"./label/add-label\"),\n    util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = createNodes;\n\nfunction createNodes(selection, g, shapes) {\n  var simpleNodes = g.nodes().filter(function(v) { return !util.isSubgraph(g, v); });\n  var svgNodes = selection.selectAll(\"g.node\")\n    .data(simpleNodes, function(v) { return v; })\n    .classed(\"update\", true);\n\n  svgNodes.selectAll(\"*\").remove();\n  svgNodes.enter()\n    .append(\"g\")\n      .attr(\"class\", \"node\")\n      .style(\"opacity\", 0);\n\n  // create queue for batch processing\n  // batch reading from then writing to DOM for increased performance\n  var itemQueue = [];\n  var labelQueue = [];\n\n  svgNodes.each(function(v) {\n    var node = g.node(v),\n        thisGroup = d3.select(this),\n        labelGroup = thisGroup.append(\"g\").attr(\"class\", \"label\"),\n        label = addLabel.createLabel(labelGroup, node),\n        labelDom = label.labelSvg;\n\n    labelQueue.push(label);\n\n    // add to queue for further processing\n    itemQueue.push({self: this, node: node, thisGroup: thisGroup, labelGroup: labelGroup, labelDom: labelDom});\n\n  });\n\n  addLabel.styleLabels(labelQueue);\n\n  // get bounding box for each label\n  itemQueue.forEach(function(item) {\n    item.bbox = _.pick(item.labelDom.node().getBBox(), \"width\", \"height\");\n  });\n\n  // apply styles with bbox info\n  itemQueue.forEach(function(item) {\n    var node = item.node,\n        thisGroup = item.thisGroup,\n        labelGroup = item.labelGroup,\n        self = item.self,\n        bbox = item.bbox;\n\n    var shape = shapes[node.shape];\n\n    node.elem = self;\n\n    if (node.id) { thisGroup.attr(\"id\", node.id); }\n    if (node.labelId) { labelGroup.attr(\"id\", node.labelId); }\n    util.applyClass(thisGroup, node[\"class\"],\n      (thisGroup.classed(\"update\") ? \"update \" : \"\") + \"node\");\n\n    if (_.has(node, \"width\")) { bbox.width = node.width; }\n    if (_.has(node, \"height\")) { bbox.height = node.height; }\n\n    bbox.width += node.paddingLeft + node.paddingRight;\n    bbox.height += node.paddingTop + node.paddingBottom;\n    labelGroup.attr(\"transform\", \"translate(\" +\n      ((node.paddingLeft - node.paddingRight) / 2) + \",\" +\n      ((node.paddingTop - node.paddingBottom) / 2) + \")\");\n\n    item.shapeSvg = shape(d3.select(self), bbox, node);\n  });\n\n  itemQueue.forEach(function(item) {\n    util.applyStyle(item.shapeSvg, item.node.style);\n  });\n\n  itemQueue.forEach(function(item) {\n    item.shapeBBox = item.shapeSvg.node().getBBox();\n  });\n\n  itemQueue.forEach(function(item) {\n    item.node.width = item.shapeBBox.width;\n    item.node.height = item.shapeBBox.height;\n  });\n\n  util.applyTransition(svgNodes.exit(), g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  return svgNodes;\n}\n","// Stub to get D3 either via NPM or from the global object\nmodule.exports = window.d3;\n","/* global window */\n\nvar dagre;\n\nif (require) {\n  try {\n    dagre = require(\"dagre\");\n  } catch (e) {}\n}\n\nif (!dagre) {\n  dagre = window.dagre;\n}\n\nmodule.exports = dagre;\n","/* global window */\n\nvar graphlib;\n\nif (require) {\n  try {\n    graphlib = require(\"graphlib\");\n  } catch (e) {}\n}\n\nif (!graphlib) {\n  graphlib = window.graphlib;\n}\n\nmodule.exports = graphlib;\n","module.exports = {\n  node: require(\"./intersect-node\"),\n  circle: require(\"./intersect-circle\"),\n  ellipse: require(\"./intersect-ellipse\"),\n  polygon: require(\"./intersect-polygon\"),\n  rect: require(\"./intersect-rect\")\n};\n","var intersectEllipse = require(\"./intersect-ellipse\");\n\nmodule.exports = intersectCircle;\n\nfunction intersectCircle(node, rx, point) {\n  return intersectEllipse(node, rx, rx, point);\n}\n","module.exports = intersectEllipse;\n\nfunction intersectEllipse(node, rx, ry, point) {\n  // Formulae from: http://mathworld.wolfram.com/Ellipse-LineIntersection.html\n\n  var cx = node.x;\n  var cy = node.y;\n\n  var px = cx - point.x;\n  var py = cy - point.y;\n\n  var det = Math.sqrt(rx * rx * py * py + ry * ry * px * px);\n\n  var dx = Math.abs(rx * ry * px / det);\n  if (point.x < cx) {\n    dx = -dx;\n  }\n  var dy = Math.abs(rx * ry * py / det);\n  if (point.y < cy) {\n    dy = -dy;\n  }\n\n  return {x: cx + dx, y: cy + dy};\n}\n\n","module.exports = intersectLine;\n\n/*\n * Returns the point at which two lines, p and q, intersect or returns\n * undefined if they do not intersect.\n */\nfunction intersectLine(p1, p2, q1, q2) {\n  // Algorithm from J. Avro, (ed.) Graphics Gems, No 2, Morgan Kaufmann, 1994,\n  // p7 and p473.\n\n  var a1, a2, b1, b2, c1, c2;\n  var r1, r2 , r3, r4;\n  var denom, offset, num;\n  var x, y;\n\n  // Compute a1, b1, c1, where line joining points 1 and 2 is F(x,y) = a1 x +\n  // b1 y + c1 = 0.\n  a1 = p2.y - p1.y;\n  b1 = p1.x - p2.x;\n  c1 = (p2.x * p1.y) - (p1.x * p2.y);\n\n  // Compute r3 and r4.\n  r3 = ((a1 * q1.x) + (b1 * q1.y) + c1);\n  r4 = ((a1 * q2.x) + (b1 * q2.y) + c1);\n\n  // Check signs of r3 and r4. If both point 3 and point 4 lie on\n  // same side of line 1, the line segments do not intersect.\n  if ((r3 !== 0) && (r4 !== 0) && sameSign(r3, r4)) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Compute a2, b2, c2 where line joining points 3 and 4 is G(x,y) = a2 x + b2 y + c2 = 0\n  a2 = q2.y - q1.y;\n  b2 = q1.x - q2.x;\n  c2 = (q2.x * q1.y) - (q1.x * q2.y);\n\n  // Compute r1 and r2\n  r1 = (a2 * p1.x) + (b2 * p1.y) + c2;\n  r2 = (a2 * p2.x) + (b2 * p2.y) + c2;\n\n  // Check signs of r1 and r2. If both point 1 and point 2 lie\n  // on same side of second line segment, the line segments do\n  // not intersect.\n  if ((r1 !== 0) && (r2 !== 0) && (sameSign(r1, r2))) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Line segments intersect: compute intersection point.\n  denom = (a1 * b2) - (a2 * b1);\n  if (denom === 0) {\n    return /*COLLINEAR*/;\n  }\n\n  offset = Math.abs(denom / 2);\n\n  // The denom/2 is to get rounding instead of truncating. It\n  // is added or subtracted to the numerator, depending upon the\n  // sign of the numerator.\n  num = (b1 * c2) - (b2 * c1);\n  x = (num < 0) ? ((num - offset) / denom) : ((num + offset) / denom);\n\n  num = (a2 * c1) - (a1 * c2);\n  y = (num < 0) ? ((num - offset) / denom) : ((num + offset) / denom);\n\n  return { x: x, y: y };\n}\n\nfunction sameSign(r1, r2) {\n  return r1 * r2 > 0;\n}\n","module.exports = intersectNode;\n\nfunction intersectNode(node, point) {\n  return node.intersect(point);\n}\n","var intersectLine = require(\"./intersect-line\");\n\nmodule.exports = intersectPolygon;\n\n/*\n * Returns the point ({x, y}) at which the point argument intersects with the\n * node argument assuming that it has the shape specified by polygon.\n */\nfunction intersectPolygon(node, polyPoints, point) {\n  var x1 = node.x;\n  var y1 = node.y;\n\n  var intersections = [];\n\n  var minX = Number.POSITIVE_INFINITY,\n      minY = Number.POSITIVE_INFINITY;\n  polyPoints.forEach(function(entry) {\n    minX = Math.min(minX, entry.x);\n    minY = Math.min(minY, entry.y);\n  });\n\n  var left = x1 - node.width / 2 - minX;\n  var top =  y1 - node.height / 2 - minY;\n\n  for (var i = 0; i < polyPoints.length; i++) {\n    var p1 = polyPoints[i];\n    var p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];\n    var intersect = intersectLine(node, point,\n      {x: left + p1.x, y: top + p1.y}, {x: left + p2.x, y: top + p2.y});\n    if (intersect) {\n      intersections.push(intersect);\n    }\n  }\n\n  if (!intersections.length) {\n    console.log(\"NO INTERSECTION FOUND, RETURN NODE CENTER\", node);\n    return node;\n  }\n\n  if (intersections.length > 1) {\n    // More intersections, find the one nearest to edge end point\n    intersections.sort(function(p, q) {\n      var pdx = p.x - point.x,\n          pdy = p.y - point.y,\n          distp = Math.sqrt(pdx * pdx + pdy * pdy),\n\n          qdx = q.x - point.x,\n          qdy = q.y - point.y,\n          distq = Math.sqrt(qdx * qdx + qdy * qdy);\n\n      return (distp < distq) ? -1 : (distp === distq ? 0 : 1);\n    });\n  }\n  return intersections[0];\n}\n","module.exports = intersectRect;\n\nfunction intersectRect(node, point) {\n  var x = node.x;\n  var y = node.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = node.width / 2;\n  var h = node.height / 2;\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = dy === 0 ? 0 : h * dx / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = dx === 0 ? 0 : w * dy / dx;\n  }\n\n  return {x: x + sx, y: y + sy};\n}\n","var util = require(\"../util\");\n\nmodule.exports = addHtmlLabel;\n\nfunction addHtmlLabel(root, node) {\n  var fo = root\n    .append(\"foreignObject\")\n      .attr(\"width\", \"100000\");\n\n  var div = fo\n    .append(\"xhtml:div\");\n  div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n\n  var label = node.label;\n  switch(typeof label) {\n    case \"function\":\n      div.insert(label);\n      break;\n    case \"object\":\n      // Currently we assume this is a DOM object.\n      div.insert(function() { return label; });\n      break;\n    default: div.html(label);\n  }\n\n  util.applyStyle(div, node.labelStyle);\n  div.style(\"display\", \"inline-block\");\n  // Fix for firefox\n  div.style(\"white-space\", \"nowrap\");\n\n  var client = div[0][0].getBoundingClientRect();\n  fo\n    .attr(\"width\", client.width)\n    .attr(\"height\", client.height); \n\n  return fo;\n}\n","var addTextLabel = require(\"./add-text-label\"),\n    addHtmlLabel = require(\"./add-html-label\"),\n    addSVGLabel  = require(\"./add-svg-label\");\n\n\nfunction createLabel(root, node, location) {\n  var label = node.label;\n  var labelSvg = root.append(\"g\");\n\n  // Allow the label to be a string, a function that returns a DOM element, or\n  // a DOM element itself.\n  if (node.labelType === \"svg\") {\n    addSVGLabel(labelSvg, node);\n  } else if (typeof label !== \"string\" || node.labelType === \"html\") {\n    addHtmlLabel(labelSvg, node);\n  } else {\n    addTextLabel(labelSvg, node);\n  }\n\n  return {labelSvg: labelSvg, node: node, location: location};\n\n}\n\nfunction getLabelBBox(item) {\n  item.labelBBox = item.labelSvg.node().getBBox();\n}\n\nfunction finishStyling(item) {\n  var node = item.node;\n  var labelSvg = item.labelSvg;\n  var labelBBox = item.labelBBox;\n  var location = item.location;\n\n  var y;\n  switch(location) {\n    case \"top\":\n      y = (-node.height / 2);\n      break;\n    case \"bottom\":\n      y = (node.height / 2) - labelBBox.height;\n      break;\n    default:\n      y = (-labelBBox.height / 2);\n  }\n  labelSvg.attr(\"transform\",\n      \"translate(\" + (-labelBBox.width / 2) + \",\" + y + \")\");\n\n  return labelSvg;\n}\n\nfunction styleLabels(items) {\n  items.forEach(getLabelBBox);\n\n  return items.map(finishStyling);\n}\n\n\nmodule.exports.createLabel = createLabel;\nmodule.exports.getLabelBBox = getLabelBBox;\nmodule.exports.finishStyling = finishStyling;\nmodule.exports.styleLabels = styleLabels;\n","var util = require(\"../util\");\n\nmodule.exports = addSVGLabel;\n\nfunction addSVGLabel(root, node) {\n  var domNode = root;\n\n  domNode.node().appendChild(node.label);\n\n  util.applyStyle(domNode, node.labelStyle);\n\n  return domNode;\n}\n","var util = require(\"../util\");\n\nmodule.exports = addTextLabel;\n\n/*\n * Attaches a text label to the specified root. Handles escape sequences.\n */\nfunction addTextLabel(root, node) {\n  var domNode = root.append(\"text\");\n\n  var lines = processEscapeSequences(node.label).split(\"\\n\");\n  for (var i = 0; i < lines.length; i++) {\n    domNode\n      .append(\"tspan\")\n        .attr(\"xml:space\", \"preserve\")\n        .attr(\"dy\", \"1em\")\n        .attr(\"x\", \"1\")\n        .text(lines[i]);\n  }\n\n  util.applyStyle(domNode, node.labelStyle);\n\n  return domNode;\n}\n\nfunction processEscapeSequences(text) {\n  var newText = \"\",\n      escaped = false,\n      ch;\n  for (var i = 0; i < text.length; ++i) {\n    ch = text[i];\n    if (escaped) {\n      switch(ch) {\n        case \"n\": newText += \"\\n\"; break;\n        default: newText += ch;\n      }\n      escaped = false;\n    } else if (ch === \"\\\\\") {\n      escaped = true;\n    } else {\n      newText += ch;\n    }\n  }\n  return newText;\n}\n","/* global window */\n\nvar lodash;\n\nif (require) {\n  try {\n    lodash = require(\"lodash\");\n  } catch (e) {}\n}\n\nif (!lodash) {\n  lodash = window._;\n}\n\nmodule.exports = lodash;\n","\"use strict\";\n\nvar util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = positionClusters;\n\nfunction positionClusters(selection, g) {\n  var created = selection.filter(function() { return !d3.select(this).classed(\"update\"); });\n\n  function translate(v) {\n    var node = g.node(v);\n    return \"translate(\" + node.x + \",\" + node.y + \")\";\n  }\n\n  created.attr(\"transform\", translate);\n\n  util.applyTransition(selection, g)\n      .style(\"opacity\", 1)\n      .attr(\"transform\", translate);\n\n  util.applyTransition(created.selectAll(\"rect\"), g)\n      .attr(\"width\", function(v) { return g.node(v).width; })\n      .attr(\"height\", function(v) { return g.node(v).height; })\n      .attr(\"x\", function(v) {\n        var node = g.node(v);\n        return -node.width / 2;\n      })\n      .attr(\"y\", function(v) {\n        var node = g.node(v);\n        return -node.height / 2;\n      });\n\n}\n","\"use strict\";\n\nvar util = require(\"./util\"),\n    d3 = require(\"./d3\"),\n    _ = require(\"./lodash\");\n\nmodule.exports = positionEdgeLabels;\n\nfunction positionEdgeLabels(selection, g) {\n  var created = selection.filter(function() { return !d3.select(this).classed(\"update\"); });\n\n  function translate(e) {\n    var edge = g.edge(e);\n    return _.has(edge, \"x\") ? \"translate(\" + edge.x + \",\" + edge.y + \")\" : \"\";\n  }\n\n  created.attr(\"transform\", translate);\n\n  util.applyTransition(selection, g)\n    .style(\"opacity\", 1)\n    .attr(\"transform\", translate);\n}\n","\"use strict\";\n\nvar util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = positionNodes;\n\nfunction positionNodes(selection, g) {\n  var created = selection.filter(function() { return !d3.select(this).classed(\"update\"); });\n\n  function translate(v) {\n    var node = g.node(v);\n    return \"translate(\" + node.x + \",\" + node.y + \")\";\n  }\n\n  created.attr(\"transform\", translate);\n\n  util.applyTransition(selection, g)\n    .style(\"opacity\", 1)\n    .attr(\"transform\", translate);\n}\n","var _ = require(\"./lodash\"),\n    layout = require(\"./dagre\").layout;\n\nmodule.exports = render;\n\n// This design is based on http://bost.ocks.org/mike/chart/.\nfunction render() {\n  var createNodes = require(\"./create-nodes\"),\n      createClusters = require(\"./create-clusters\"),\n      createEdgeLabels = require(\"./create-edge-labels\"),\n      createEdgePaths = require(\"./create-edge-paths\"),\n      positionNodes = require(\"./position-nodes\"),\n      positionEdgeLabels = require(\"./position-edge-labels\"),\n      positionClusters = require(\"./position-clusters\"),\n      shapes = require(\"./shapes\"),\n      arrows = require(\"./arrows\");\n\n  var fn = function(svg, g) {\n    preProcessGraph(g);\n\n    var outputGroup = createOrSelectGroup(svg, \"output\"),\n        clustersGroup = createOrSelectGroup(outputGroup, \"clusters\"),\n        edgePathsGroup = createOrSelectGroup(outputGroup, \"edgePaths\"),\n        edgeLabels = createEdgeLabels(createOrSelectGroup(outputGroup, \"edgeLabels\"), g),\n        nodes = createNodes(createOrSelectGroup(outputGroup, \"nodes\"), g, shapes);\n\n    layout(g);\n\n    positionNodes(nodes, g);\n    positionEdgeLabels(edgeLabels, g);\n    createEdgePaths(edgePathsGroup, g, arrows);\n\n    var clusters = createClusters(clustersGroup, g);\n    positionClusters(clusters, g);\n\n    postProcessGraph(g);\n  };\n\n  fn.createNodes = function(value) {\n    if (!arguments.length) return createNodes;\n    createNodes = value;\n    return fn;\n  };\n\n  fn.createClusters = function(value) {\n    if (!arguments.length) return createClusters;\n    createClusters = value;\n    return fn;\n  };\n\n  fn.createEdgeLabels = function(value) {\n    if (!arguments.length) return createEdgeLabels;\n    createEdgeLabels = value;\n    return fn;\n  };\n\n  fn.createEdgePaths = function(value) {\n    if (!arguments.length) return createEdgePaths;\n    createEdgePaths = value;\n    return fn;\n  };\n\n  fn.shapes = function(value) {\n    if (!arguments.length) return shapes;\n    shapes = value;\n    return fn;\n  };\n\n  fn.arrows = function(value) {\n    if (!arguments.length) return arrows;\n    arrows = value;\n    return fn;\n  };\n\n  return fn;\n}\n\nvar NODE_DEFAULT_ATTRS = {\n  paddingLeft: 10,\n  paddingRight: 10,\n  paddingTop: 10,\n  paddingBottom: 10,\n  rx: 0,\n  ry: 0,\n  shape: \"rect\"\n};\n\nvar EDGE_DEFAULT_ATTRS = {\n  arrowhead: \"normal\",\n  lineInterpolate: \"linear\"\n};\n\nfunction preProcessGraph(g) {\n  g.nodes().forEach(function(v) {\n    var node = g.node(v);\n    if (!_.has(node, \"label\") && !g.children(v).length) { node.label = v; }\n\n    if (_.has(node, \"paddingX\")) {\n      _.defaults(node, {\n        paddingLeft: node.paddingX,\n        paddingRight: node.paddingX\n      });\n    }\n\n    if (_.has(node, \"paddingY\")) {\n      _.defaults(node, {\n        paddingTop: node.paddingY,\n        paddingBottom: node.paddingY\n      });\n    }\n\n    if (_.has(node, \"padding\")) {\n      _.defaults(node, {\n        paddingLeft: node.padding,\n        paddingRight: node.padding,\n        paddingTop: node.padding,\n        paddingBottom: node.padding\n      });\n    }\n\n    _.defaults(node, NODE_DEFAULT_ATTRS);\n\n    _.each([\"paddingLeft\", \"paddingRight\", \"paddingTop\", \"paddingBottom\"], function(k) {\n      node[k] = Number(node[k]);\n    });\n\n    // Save dimensions for restore during post-processing\n    if (_.has(node, \"width\")) { node._prevWidth = node.width; }\n    if (_.has(node, \"height\")) { node._prevHeight = node.height; }\n  });\n\n  g.edges().forEach(function(e) {\n    var edge = g.edge(e);\n    if (!_.has(edge, \"label\")) { edge.label = \"\"; }\n    _.defaults(edge, EDGE_DEFAULT_ATTRS);\n  });\n}\n\nfunction postProcessGraph(g) {\n  _.each(g.nodes(), function(v) {\n    var node = g.node(v);\n\n    // Restore original dimensions\n    if (_.has(node, \"_prevWidth\")) {\n      node.width = node._prevWidth;\n    } else {\n      delete node.width;\n    }\n\n    if (_.has(node, \"_prevHeight\")) {\n      node.height = node._prevHeight;\n    } else {\n      delete node.height;\n    }\n\n    delete node._prevWidth;\n    delete node._prevHeight;\n  });\n}\n\nfunction createOrSelectGroup(root, name) {\n  var selection = root.select(\"g.\" + name);\n  if (selection.empty()) {\n    selection = root.append(\"g\").attr(\"class\", name);\n  }\n  return selection;\n}\n","\"use strict\";\n\nvar intersectRect = require(\"./intersect/intersect-rect\"),\n    intersectEllipse = require(\"./intersect/intersect-ellipse\"),\n    intersectCircle = require(\"./intersect/intersect-circle\"),\n    intersectPolygon = require(\"./intersect/intersect-polygon\");\n\nmodule.exports = {\n  rect: rect,\n  ellipse: ellipse,\n  circle: circle,\n  diamond: diamond\n};\n\nfunction rect(parent, bbox, node) {\n  var shapeSvg = parent.insert(\"rect\", \":first-child\")\n        .attr(\"rx\", node.rx)\n        .attr(\"ry\", node.ry)\n        .attr(\"x\", -bbox.width / 2)\n        .attr(\"y\", -bbox.height / 2)\n        .attr(\"width\", bbox.width)\n        .attr(\"height\", bbox.height);\n\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction ellipse(parent, bbox, node) {\n  var rx = bbox.width / 2,\n      ry = bbox.height / 2,\n      shapeSvg = parent.insert(\"ellipse\", \":first-child\")\n        .attr(\"x\", -bbox.width / 2)\n        .attr(\"y\", -bbox.height / 2)\n        .attr(\"rx\", rx)\n        .attr(\"ry\", ry);\n\n  node.intersect = function(point) {\n    return intersectEllipse(node, rx, ry, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction circle(parent, bbox, node) {\n  var r = Math.max(bbox.width, bbox.height) / 2,\n      shapeSvg = parent.insert(\"circle\", \":first-child\")\n        .attr(\"x\", -bbox.width / 2)\n        .attr(\"y\", -bbox.height / 2)\n        .attr(\"r\", r);\n\n  node.intersect = function(point) {\n    return intersectCircle(node, r, point);\n  };\n\n  return shapeSvg;\n}\n\n// Circumscribe an ellipse for the bounding box with a diamond shape. I derived\n// the function to calculate the diamond shape from:\n// http://mathforum.org/kb/message.jspa?messageID=3750236\nfunction diamond(parent, bbox, node) {\n  var w = (bbox.width * Math.SQRT2) / 2,\n      h = (bbox.height * Math.SQRT2) / 2,\n      points = [\n        { x:  0, y: -h },\n        { x: -w, y:  0 },\n        { x:  0, y:  h },\n        { x:  w, y:  0 }\n      ],\n      shapeSvg = parent.insert(\"polygon\", \":first-child\")\n        .attr(\"points\", points.map(function(p) { return p.x + \",\" + p.y; }).join(\" \"));\n\n  node.intersect = function(p) {\n    return intersectPolygon(node, points, p);\n  };\n\n  return shapeSvg;\n}\n","var _ = require(\"./lodash\");\n\n// Public utility functions\nmodule.exports = {\n  isSubgraph: isSubgraph,\n  edgeToId: edgeToId,\n  applyStyle: applyStyle,\n  applyClass: applyClass,\n  applyTransition: applyTransition\n};\n\n/*\n * Returns true if the specified node in the graph is a subgraph node. A\n * subgraph node is one that contains other nodes.\n */\nfunction isSubgraph(g, v) {\n  return !!g.children(v).length;\n}\n\nfunction edgeToId(e) {\n  return escapeId(e.v) + \":\" + escapeId(e.w) + \":\" + escapeId(e.name);\n}\n\nvar ID_DELIM = /:/g;\nfunction escapeId(str) {\n  return str ? String(str).replace(ID_DELIM, \"\\\\:\") : \"\";\n}\n\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr(\"style\", styleFn);\n  }\n}\n\nfunction applyClass(dom, classFn, otherClasses) {\n  if (classFn) {\n    dom\n      .attr(\"class\", classFn)\n      .attr(\"class\", otherClasses + \" \" + dom.attr(\"class\"));\n  }\n}\n\nfunction applyTransition(selection, g) {\n  var graph = g.graph();\n\n  if (_.isPlainObject(graph)) {\n    var transition = graph.transition;\n    if (_.isFunction(transition)) {\n      return transition(selection);\n    }\n  }\n\n  return selection;\n}\n","module.exports = \"0.4.18\";\n"]}